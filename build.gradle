// ---------------------------------------- Plugins ----------------------------------------

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'

import org.apache.tools.ant.filters.ReplaceTokens
import static Constants.*

// ---------------------------------------- Main Settings ----------------------------------------

class Constants
{
	public static String version = '0.35.0'
	public static String libraryVersion = '0.35.0'
	public static String compilerVersion = '0.35.0'
	public static String replVersion = '0.21.1'
	public static String dpfVersion = '0.14.1'
	public static String genSrcVersion = '0.7.0'

	public static final String devStage = 'delta'

	public static final String replMainClass = 'dyvilx.tools.repl.Main'
	public static final String compilerMainClass = 'dyvilx.tools.compiler.Main'
	public static final String genSrcMainClass = 'dyvilx.tools.gensrc.Main'

	public static final List<String> dyvilFilters = [ '**/*.dyv', '**/*.dyh', '**/*.dyvil', '**/*.dyvilh' ]
	public static final List<String> javaFilters = [ '**/*.java' ]
	public static final List<String> genSrcFilters = [ '**/*.dgt', '**/*.dgs' ]
	public static final List<String> resourceFilters = [ '**/*.properties' ]
	public static final List<String> binaryFilters = [ '**/*.dyo', '**/*.class' ]
}

project.group = 'clashsoft'
project.version = version
project.sourceCompatibility = 9
project.targetCompatibility = 9

// ---------------------------------------- Nightly Versioning ----------------------------------------

Map<String, String> env = System.getenv()
String buildNum = env['TRAVIS_BUILD_NUMBER'] ?: env['DRONE_BUILD_NUMBER']
boolean nightly

if (buildNum)
{
	String info = "+nightly." + buildNum

	version += info
	libraryVersion += info
	compilerVersion += info
	replVersion += info
	dpfVersion += info
	genSrcVersion += info

	nightly = true
}

// ---------------------------------------- Source Settings ----------------------------------------

//noinspection GroovyAssignabilityCheck
sourceSets {
	library {
		java {
			srcDir 'src/library'
			srcDir 'src/asm'
			srcDir 'src/tools'

			srcDir "$buildDir/gensrc/library"
		}

		resources {
			srcDir 'src/library'
			srcDir 'src/tools'

			include resourceFilters
		}
	}

	dpf {
		java {
			srcDir 'src/dpf'

			srcDir "$buildDir/gensrc/dpf"
		}

		resources {
			srcDir 'src/dpf'
			include resourceFilters
		}
	}

	compiler {
		java {
			srcDir 'src/compiler'
		}

		resources {
			srcDir 'src/compiler'
			include resourceFilters
		}
	}

	repl {
		java {
			srcDir 'src/repl'
		}

		resources {
			srcDir 'src/repl'
			include resourceFilters
		}
	}

	gensrc {
		java {
			srcDir 'src/gensrc'
		}

		resources {
			srcDir 'src/gensrc'
			include resourceFilters
		}
	}

	test {
		java {
			srcDir 'src/test'
		}
	}
}

//noinspection GroovyAssignabilityCheck
processResources {
	include resourceFilters
}

// ---------------------------------------- Dependencies ----------------------------------------

repositories {
	mavenCentral()
}

dependencies {
	// Runtime Dependencies (Resources)

	def libRun = files("$buildDir/dyvil-classes/library")
	def dpfRun = files("$buildDir/dyvil-classes/dpf")
	def testRun = files("$buildDir/dyvil-classes/test")

	def bootstrap = files('libs/dyvil-bootstrap.jar')
	def libComp = sourceSets.library.output

	libraryRuntime libRun
	libraryCompile bootstrap

	// compiler -> library
	compilerCompile libComp
	compilerRuntime libRun
	compilerCompile bootstrap

	// dpf -> library
	dpfCompile libComp
	dpfRuntime libRun, dpfRun
	dpfCompile bootstrap

	// repl -> library, compiler
	replCompile libComp, sourceSets.compiler.output
	replRuntime libRun, dpfRun, testRun
	replCompile bootstrap

	// gensrc -> library
	gensrcCompile libComp
	gensrcRuntime libRun
	gensrcCompile bootstrap

	// test -> library, junit
	testCompile libComp, 'junit:junit:4.12'
	testRuntime libRun, dpfRun, testRun
	testCompile bootstrap
}

wrapper {
	distributionType = Wrapper.DistributionType.ALL
}

// ---------------------------------------- Copy Tasks ----------------------------------------

// Library

task copyLibraryJava(type: Sync, dependsOn: 'genLibrary') {
	from sourceSets.library.java
	into "$buildDir/src/java/library"

	include javaFilters
	includeEmptyDirs = false
}

compileLibraryJava.dependsOn copyLibraryJava
compileLibraryJava.source = "$buildDir/src/java/library"

task copyLibraryDyvil(type: Sync, dependsOn: 'genLibrary') {
	from 'src/library'
	from 'src/tools'
	from "$buildDir/gensrc/library"
	into "$buildDir/src/dyvil/library"

	include dyvilFilters
	includeEmptyDirs = false
}

// Compiler

task copyCompilerJava(type: Sync) {
	from sourceSets.compiler.java
	into "$buildDir/src/java/compiler"

	include javaFilters
	includeEmptyDirs = false

	filesMatching('**/DyvilCompiler.java') {
		filter(ReplaceTokens, beginToken: '$$', endToken: '$$',
				tokens: [ version        : version,
				          libraryVersion : libraryVersion,
				          compilerVersion: compilerVersion ])
	}
}

compileCompilerJava.dependsOn copyCompilerJava
compileCompilerJava.source = "$buildDir/src/java/compiler"

// REPL

task copyReplJava(type: Sync) {
	from sourceSets.repl.java
	into "$buildDir/src/java/repl"

	include javaFilters
	includeEmptyDirs = false

	filesMatching('**/DyvilREPL.java') {
		filter(ReplaceTokens, beginToken: '$$', endToken: '$$', tokens: [ replVersion: replVersion ])
	}
}

compileReplJava.dependsOn copyReplJava
compileReplJava.source = "$buildDir/src/java/repl"

// DPF

task copyDPFDyvil(type: Sync, dependsOn: 'genDPF') {
	from 'src/dpf'
	from "$buildDir/gensrc/dpf"
	into "$buildDir/src/dyvil/dpf"

	includeEmptyDirs = false
	include dyvilFilters
}

// Tests

task copyTestDyvil(type: Sync) {
	from 'src/test'
	into "$buildDir/src/dyvil/test"

	includeEmptyDirs = false
	include dyvilFilters
}

// ---------------------------------------- Compilation Tasks ----------------------------------------

idea.module.inheritOutputDirs = true

tasks.withType(JavaCompile) {
	it.options.compilerArgs.addAll(
			'-parameters',          // generates parameter attributes and names
			'-XDignore.symbol.file' // disables "proprietary API" warnings
	)
	it.options.fork = true
}

task genLibrary(type: JavaExec) { JavaExec exec ->
	runGenSrc exec, "$buildDir/gensrc/library/", 'src/library/', 'src/gensrc-base'
}

task genDPF(type: JavaExec) { JavaExec exec ->
	runGenSrc exec, "$buildDir/gensrc/dpf/", 'src/dpf/', 'src/gensrc-base'
}

/**
 * Compiles the Dyvil Classes and Headers in the Dyvil Library by running the freshly-compiled compiler
 */
task compileLibraryDyvil(type: JavaExec, dependsOn: [ 'compilerClasses', 'copyLibraryDyvil' ]) { JavaExec exec ->
	runCompiler exec, 'config/lib.dyc', "$buildDir/dyvil-classes/library", "$buildDir/src/dyvil/library/"
}

task compileDPFDyvil(type: JavaExec, dependsOn: [ 'compileLibraryDyvil', 'copyDPFDyvil' ]) { JavaExec exec ->
	runCompiler exec, 'config/dpf.dyc', "$buildDir/dyvil-classes/dpf", "$buildDir/src/dyvil/dpf"
}

task compileTestDyvil(type: JavaExec, dependsOn: [ 'compileDPFDyvil', 'copyTestDyvil' ]) { JavaExec exec ->
	runCompiler exec, 'config/test.dyc', "$buildDir/dyvil-classes/test", 'src/test/'
}

private void runCompiler(JavaExec exec, String config, String target, String... srcs)
{
	// Required to make UP-TO-DATE work

	// All possible Output Files (.class, .dyo)
	exec.outputs.dir target

	exec.main = compilerMainClass
	exec.classpath = sourceSets.compiler.runtimeClasspath
	exec.args = [ "@$config", 'compile', '--ansi' ]

	for (String src : srcs)
	{
		exec.inputs.file fileTree(src) {
			include dyvilFilters
		}
	}
}

/* // Add a / at the start of this line to skip all compilation tasks
tasks.withType(JavaExec).forEach{it.enabled = false}
tasks.withType(JavaCompile).forEach{it.enabled = false}
//*/

private void runGenSrc(JavaExec exec, String target, String... srcs)
{
	exec.outputs.dirs target

	exec.main = genSrcMainClass
	exec.classpath = files("libs/dyvil-bootstrap.jar")
	exec.args = [ "target=$target", '--ansi' ]

	for (String src : srcs)
	{
		exec.args += "source=$src"

		exec.inputs.file fileTree(src) {
			include genSrcFilters
		}
	}
}

// ---------------------------------------- Test Tasks ----------------------------------------

task testDyvil(type: JavaExec, dependsOn: [ 'compileTestDyvil' ]) {
	main = 'dyvil.test.Main'
	classpath = sourceSets.test.runtimeClasspath
}

task testGenSrc(type: JavaExec, dependsOn: [ 'gensrcClasses' ]) { JavaExec exec ->
	runGenSrc(exec, "$buildDir/gensrc/test", "src/test/gensrc")
}

test.dependsOn 'testDyvil', 'testGenSrc'

// ---------------------------------------- Build Tasks ----------------------------------------

/**
 * Creates a Jar file that contains all library classes (from src/library), including ASM
 */
task buildLibrary(type: Jar, dependsOn: [ 'libraryClasses', 'compileLibraryDyvil' ]) {
	from sourceSets.library.output
	from sourceSets.library.resources

	from("$buildDir/dyvil-classes/library") {
		include binaryFilters
	}

	archiveName = "dyvil-library-${ libraryVersion }.jar"
}

task buildDPF(type: Jar, dependsOn: [ 'dpfClasses', 'compileDPFDyvil' ]) {
	from sourceSets.dpf.output

	from("$buildDir/dyvil-classes/dpf") {
		include binaryFilters
	}

	archiveName = "dyvil-property-format-${ dpfVersion }.jar"
}

/**
 * Creates a Jar file that contains all compiler classes (from src/compiler)
 */
task buildCompiler(type: Jar, dependsOn: 'compilerClasses') {
	from sourceSets.compiler.output
	from sourceSets.compiler.resources

	archiveName = "dyvil-compiler-${ compilerVersion }.jar"

	manifest.attributes.put("Main-Class", compilerMainClass)
}

/**
 * Creates a Jar file that contains all REPL classes (from src/repl)
 */
task buildREPL(type: Jar, dependsOn: 'replClasses') {
	from sourceSets.repl.output
	from sourceSets.repl.resources

	archiveName = "dyvil-repl-${ replVersion }.jar"

	manifest.attributes.put("Main-Class", replMainClass)
}

task buildGenSrc(type: Jar, dependsOn: 'gensrcClasses') {
	from sourceSets.gensrc.output
	from sourceSets.gensrc.resources

	archiveName = "dyvil-gensrc-${ genSrcVersion }.jar"

	manifest.attributes.put("Main-Class", genSrcMainClass)
}

/**
 * Creates a Jar file that combines all classes from library, compiler and REPL.
 */
task buildAll(type: Jar, dependsOn: [ 'libraryClasses', 'compileLibraryDyvil', 'compilerClasses', 'replClasses',
                                      'dpfClasses', 'compileDPFDyvil', 'gensrcClasses' ]) {
	from sourceSets.library.output
	from sourceSets.library.resources
	from sourceSets.compiler.output
	from sourceSets.compiler.resources
	from sourceSets.repl.output
	from sourceSets.repl.resources
	from sourceSets.dpf.output
	from sourceSets.gensrc.output
	from sourceSets.gensrc.resources

	from("$buildDir/dyvil-classes/library") {
		include binaryFilters
	}
	from("$buildDir/dyvil-classes/dpf") {
		include binaryFilters
	}

	archiveName = "dyvil-${ version }.jar"

	manifest.attributes.put("Main-Class", replMainClass)
}

build.setDependsOn([ 'buildAll', 'buildLibrary', 'buildCompiler', 'buildREPL', 'buildDPF', 'buildGenSrc' ])

/**
 * Creates a Jar file that contains all library classes generated from Dyvil source code and saves it in libs/
 */
task bootstrap(type: Jar, dependsOn: [ 'buildLibrary', 'buildCompiler', 'buildGenSrc' ]) {
	from zipTree(buildLibrary.archivePath)
	from zipTree(buildCompiler.archivePath)
	from zipTree(buildGenSrc.archivePath)

	destinationDir = file("libs/")
	archiveName = "dyvil-bootstrap.jar"
}

tasks.withType(Jar).forEach {
	it.from('.') {
		include '*LICENSE*.txt'
	}
}

// ---------------------------------------- Version Files ----------------------------------------

task prepareRelease(type: Copy) {
	outputs.upToDateWhen { return false }

	from 'versions/'

	if (nightly)
	{
		into 'versions'
		include 'nightly-template.dyp'
		rename 'nightly\\-template\\.dyp', 'nightly.dyp'
	}
	else
	{
		into "versions/$devStage"
		include 'template.dyp'
		rename 'template\\.dyp', "v${ version }.dyp"
	}

	filter(ReplaceTokens, beginToken: '$$', endToken: '$$',
			tokens: [ version        : version,
			          libraryVersion : libraryVersion,
			          compilerVersion: compilerVersion,
			          replVersion    : replVersion,
			          dpfVersion     : dpfVersion,
			          genSrcVersion  : genSrcVersion ])

	doLast {
		println "Release v$version"
		println ""
		println "Library v$libraryVersion"
		println "Compiler v$compilerVersion"
		println "REPL v$replVersion"
		println "Dyvil Property Format v$dpfVersion"
		println "GenSrc v$genSrcVersion"
	}
}

if (nightly)
{
	build.dependsOn 'prepareRelease'
}

// ---------------------------------------- Cleanup Tasks ----------------------------------------

task cleanDyvil(type: Delete, group: 'cleanup') {
	// Delete contents, but not the directories itself
	delete fileTree("$buildDir/dyvil-classes")
	delete fileTree("$buildDir/gensrc")
}

clean {
	group = 'cleanup'
	dependsOn 'cleanDyvil'

	delete = buildDir.listFiles().findAll({
		def path = it.getPath()
		!path.endsWith('dyvil-classes') && !path.endsWith('libs')
	}).toSet()
}
